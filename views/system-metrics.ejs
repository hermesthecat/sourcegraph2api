<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Sourcegraph2API Panel</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        .chart-card, .status-card {
            background-color: #333;
            padding: 20px;
            border-radius: 8px;
        }
        .stat-cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        .stat-card h3 {
            margin-top: 0;
        }
        .status-list {
            list-style: none;
            padding: 0;
        }
        .status-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #444;
        }
        .status-indicator {
            width: 15px;
            height: 15px;
            border-radius: 50%;
        }
        .status-ok { background-color: #28a745; }
        .status-error { background-color: #dc3545; }
        .loader { text-align: center; font-size: 1.5em; padding: 40px; }
    </style>
</head>
<body>
    <%- include('partials/nav') %>

    <div class="container">
        <h1><%= title %></h1>
        <p>Bu sayfa, <code>/metrics/dashboard</code> uç noktasından gelen ham JSON verisini anlık olarak çeker ve görselleştirir.</p>
        
        <div id="loading" class="loader">Veriler Yükleniyor...</div>

        <div id="stats-container" style="display: none;">
            <!-- Genel İstatistikler -->
            <div id="stat-cards" class="stat-cards-container"></div>

            <div class="dashboard-grid">
                <!-- Hafıza Kullanım Grafiği -->
                <div class="chart-card">
                    <h3>Hafıza Kullanımı (MB)</h3>
                    <canvas id="memoryChart"></canvas>
                </div>

                <!-- Önbellek İstatistikleri Grafiği -->
                <div class="chart-card">
                    <h3>Önbellek İstatistikleri</h3>
                    <canvas id="cacheChart"></canvas>
                </div>
                
                <!-- Servis Durumları -->
                <div class="status-card">
                    <h3>Servis Durumları</h3>
                    <ul id="services-status" class="status-list"></ul>
                </div>
            </div>
        </div>

    </div>

    <script>
        // Chart.js için genel okunurluk ayarları
        Chart.defaults.color = '#ccc'; // Genel metin rengi
        Chart.defaults.borderColor = '#444'; // Eksen çizgileri rengi

        document.addEventListener('DOMContentLoaded', () => {
            const loadingIndicator = document.getElementById('loading');
            const statsContainer = document.getElementById('stats-container');

            fetch('/metrics/dashboard')
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP hatası! Durum: ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    loadingIndicator.style.display = 'none';
                    statsContainer.style.display = 'block';
                    renderAllStats(data);
                })
                .catch(error => {
                    console.error('Veri alınırken hata:', error);
                    loadingIndicator.innerHTML = `<span style="color: #ff4d4d;">Veri alınamadı: ${error.message}</span>`;
                });
        });

        function renderAllStats(data) {
            renderStatCards(data);
            renderMemoryChart(data.system.memory);
            renderCacheChart(data.cache);
            renderServicesStatus(data.services);
        }

        function renderStatCards(data) {
            const container = document.getElementById('stat-cards');
            const overview = data.overview || {};
            const system = data.system || {};
            
            const cards = [
                { title: 'Toplam İstek', value: overview.total_requests || 'N/A' },
                { title: 'Başarı Oranı', value: overview.success_rate ? `${overview.success_rate}%` : 'N/A' },
                { title: 'Çalışma Süresi', value: system.uptime ? `${(system.uptime / 60).toFixed(2)} dk` : 'N/A' }
            ];
            
            container.innerHTML = cards.map(card => `
                <div class="stat-card">
                    <h3>${card.title}</h3>
                    <p>${card.value}</p>
                </div>
            `).join('');
        }
        
        function renderMemoryChart(memoryData) {
            const ctx = document.getElementById('memoryChart').getContext('2d');
            const toMB = (bytes) => (bytes / 1024 / 1024).toFixed(2);

            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Kullanılan (Heap)', 'Toplam (Heap)', 'RSS'],
                    datasets: [{
                        label: 'Hafıza Kullanımı',
                        data: [toMB(memoryData.heapUsed), toMB(memoryData.heapTotal), toMB(memoryData.rss)],
                        backgroundColor: ['#dc3545', '#ffc107', '#007bff'],
                    }]
                },
                options: { 
                    responsive: true, 
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#ccc' // Legend metin rengi
                            }
                        }
                    }
                }
            });
        }

        function renderCacheChart(cacheData) {
            const ctx = document.getElementById('cacheChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['İsabet (Hits)', 'Iskalama (Misses)', 'Anahtar Sayısı'],
                    datasets: [{
                        label: 'Önbellek Durumu',
                        data: [cacheData.hits, cacheData.misses, cacheData.keys],
                        backgroundColor: ['#28a745', '#dc3545', '#007bff'],
                    }]
                },
                options: { 
                    scales: { 
                        y: { 
                            beginAtZero: true,
                            ticks: { color: '#ccc' }, // Y ekseni etiket rengi
                            grid: { color: '#444' }  // Y ekseni grid çizgileri
                        },
                        x: {
                            ticks: { color: '#ccc' }, // X ekseni etiket rengi
                            grid: { color: '#444' }  // X ekseni grid çizgileri
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#ccc' // Legend metin rengi
                            }
                        }
                    } 
                }
            });
        }

        function renderServicesStatus(servicesData) {
            const list = document.getElementById('services-status');
            list.innerHTML = Object.entries(servicesData).map(([name, service]) => `
                <li>
                    <span>${name}</span>
                    <span class="status-indicator ${service.status === 'ok' ? 'status-ok' : 'status-error'}"></span>
                </li>
            `).join('');
        }

    </script>
</body>
</html> 